import telebot
from telebot import types
import random
from qstns import *

# –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
restaurants = [
    {"name": "–†–µ—Å—Ç–æ—Ä–∞–Ω '–ü—Ä–æ–≤–∞–Ω—Å'", "address": "—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 15", "cuisine": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è", "price": "800 —Ä—É–±–ª–µ–π", "rating": "5 ‚≠ê"},
    {"name": "–ö–∞—Ñ–µ '–°–∞–∫—É—Ä–∞'", "address": "–ø—Ä-—Ç –ú–∏—Ä–∞, –¥. 25", "cuisine": "–Ø–ø–æ–Ω—Å–∫–∞—è", "price": "600 —Ä—É–±–ª–µ–π", "rating": "4 ‚≠ê"},
    {"name": "–ü–∏—Ü—Ü–µ—Ä–∏—è '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞'", "address": "—É–ª. –ì–æ—Ä—å–∫–æ–≥–æ, –¥. 20", "cuisine": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "price": "700 —Ä—É–±–ª–µ–π", "rating": "5 ‚≠ê"},
    {"name": "–†–µ—Å—Ç–æ—Ä–∞–Ω '–®–∞—à–ª—ã—á–Ω–∞—è'", "address": "—É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, –¥. 35", "cuisine": "–ö–∞–≤–∫–∞–∑—Å–∫–∞—è", "price": "900 —Ä—É–±–ª–µ–π", "rating": "5 ‚≠ê"},
    {"name": "–ö–∞—Ñ–µ '–£—é—Ç–Ω—ã–π —É–≥–æ–ª–æ–∫'", "address": "—É–ª. –ö–∏—Ä–æ–≤–∞, –¥. 40", "cuisine": "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", "price": "550 —Ä—É–±–ª–µ–π", "rating": "3 ‚≠ê"}
]

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–Ω–∞—Ç
user_data = {}
rooms = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7636573482:AAGUi4I-kYnb4WHyyN4emv4hpf7K3QealYY')

def ask_question(user_id):
    step = user_data[user_id]["step"]
    if step < len(questions):
        question_data = questions[step]
        keyboard = types.InlineKeyboardMarkup()
        for key, value in question_data["options"].items():
            for option, _ in value.items():
                keyboard.add(types.InlineKeyboardButton(option, callback_data=f"answer_{key}"))
        bot.send_message(user_id, question_data["question"], reply_markup=keyboard)
    else:
        show_results(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def show_results(user_id):
    cuisines = user_data[user_id]["cuisines"]
    sorted_cuisines = sorted(cuisines.items(), key=lambda x: x[1], reverse=True)
    result_message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:\n"
    for cuisine, score in sorted_cuisines:
        if score > 0:
            result_message += f"{cuisine}: {score} –±–∞–ª–ª–æ–≤\n"
    bot.send_message(user_id, result_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.chat.id
    user_data[user_id] = {"step": 0, "cuisines": cuisines.copy()}
    ask_question(user_id)  # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–î–∞", callback_data="spicy_yes"))
    keyboard.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="spicy_no"))

    bot.send_message(
        user_id,
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚Äî Dorcia, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. –ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –≤–∞–º –∏ –≤–∞—à–∏–º –∫–æ–ª–ª–µ–≥–∞–º –ø–æ –≤–∫—É—Å—É. üçΩÔ∏è\n"
        "–ß—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ –≤–∞—à–∏—Ö –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö. üçΩÔ∏è\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.message.chat.id
    data = call.data

    if user_data[user_id]["step"] == "preferences":
        if data in ["spicy_yes", "spicy_no"]:
            user_data[user_id]["spicy"] = data == "spicy_yes"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("–î–∞", callback_data="spices_yes"))
            keyboard.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="spices_no"))
            bot.edit_message_text(
                "2. –õ—é–±–∏—Ç–µ –±–ª—é–¥–∞ —Å–æ —Å–ø–µ—Ü–∏—è–º–∏?",
                chat_id=user_id,
                message_id=call.message.message_id,
                reply_markup=keyboard
            )
        elif data in ["spices_yes", "spices_no"]:
            user_data[user_id]["spices"] = data == "spices_yes"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data="create_room"))
            keyboard.add(types.InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ", callback_data="join_room"))
            bot.edit_message_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.",
                chat_id=user_id,
                message_id=call.message.message_id,
                reply_markup=keyboard
            )
            user_data[user_id]["step"] = "room_choice"
    elif user_data[user_id]["step"] == "room_choice":
        if data == "create_room":
            room_code = str(random.randint(10000, 99999))
            rooms[room_code] = {"members": [user_id], "status": "waiting"}
            user_data[user_id]["room_code"] = room_code
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("–ê–¥—Ä–µ—Å 1", callback_data="address_1"))
            keyboard.add(types.InlineKeyboardButton("–ê–¥—Ä–µ—Å 2", callback_data="address_2"))
            bot.edit_message_text(
                "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏, —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å.",
                chat_id=user_id,
                message_id=call.message.message_id,
                reply_markup=keyboard
            )
            user_data[user_id]["step"] = "address"
        elif data == "join_room":
            bot.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.",
                chat_id=user_id,
                message_id=call.message.message_id
            )
            user_data[user_id]["step"] = "join_room"
    elif user_data[user_id]["step"] == "address":
        user_data[user_id]["address"] = data
        bot.edit_message_text(
            f"–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –í–æ—Ç –µ—ë —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: {user_data[user_id]['room_code']}. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –∫–æ–ª–ª–µ–≥–∞–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞–º.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *–ì–æ—Ç–æ–≤—ã!*",
            chat_id=user_id,
            message_id=call.message.message_id
        )
        user_data[user_id]["step"] = "ready"
    elif user_data[user_id]["step"] == "ready":
        if data == "ready":
            bot.edit_message_text(
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–¥–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...",
                chat_id=user_id,
                message_id=call.message.message_id
            )
            show_restaurants(user_id)

# –ü–æ–∫–∞–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
def show_restaurants(user_id):
    keyboard = types.InlineKeyboardMarkup()
    for i, restaurant in enumerate(restaurants):
        keyboard.add(types.InlineKeyboardButton(restaurant["name"], callback_data=f"restaurant_{i}"))
    bot.send_message(user_id, "–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.chat.id
    if user_data[user_id]["step"] == "join_room":
        room_code = message.text
        if room_code in rooms:
            rooms[room_code]["members"].append(user_id)
            user_data[user_id]["room_code"] = room_code
            bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        else:
            bot.send_message(user_id, "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()

# ----------------------------------------------------------
'''
@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–ú–æ–∂–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å', callback_data='start_quiz')
    markup.add(btn1)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚Äî Dorcia, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. –ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –≤–∞–º –∏ –≤–∞—à–∏–º –∫–æ–ª–ª–µ–≥–∞–º –ø–æ –≤–∫—É—Å—É. üçΩ\n"
        "–ß—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ –≤–∞—à–∏—Ö –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö. \n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith(('start_quiz', 'answer', 'followup')))
def handle_query(call):
    user_id = call.message.chat.id
    data = call.data
    
    if data == 'start_quiz':
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = {
            'current_question': 0,
            'cuisines': {k: 0 for k in cuisines},
            'follow_up': None
        }
        ask_question(user_id)
    elif data.startswith('answer_'):
        handle_answer(user_id, data)
    elif data.startswith('followup_'):
        handle_followup(user_id, data)

def ask_question(user_id, question_num=0):
    state = user_states[user_id]
    
    if question_num >= len(questions):
        return show_results(user_id)
    
    if state['follow_up'] is not None:
        q_data = state['follow_up']
        state['follow_up'] = None
    else:
        q_data = questions[question_num]
    
    markup = types.InlineKeyboardMarkup()
    for key in q_data['options']:
        btn_text = list(q_data['options'][key].keys())[0]
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f'answer_{question_num}_{key}'))
    
    bot.send_message(user_id, q_data['question'], reply_markup=markup)

def handle_answer(user_id, data):
    state = user_states[user_id]
    _, q_num, answer = data.split('_')
    q_num = int(q_num)
    q_data = questions[q_num]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã
    selected = list(q_data['options'][answer].values())[0]
    for cuisine in selected:
        state['cuisines'][cuisine] += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    if 'follow_up' in q_data and answer in q_data['follow_up']:
        state['follow_up'] = q_data['follow_up'][answer]
        ask_question(user_id, q_num)
    else:
        state['current_question'] += 1
        ask_question(user_id, state['current_question'])

def handle_followup(user_id, data):
    state = user_states[user_id]
    _, answer = data.split('_')
    q_data = state['follow_up']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã
    selected = list(q_data['options'][answer].values())[0]
    for cuisine in selected:
        state['cuisines'][cuisine] += 0.5
    
    state['current_question'] += 1
    ask_question(user_id, state['current_question'])

def show_results(user_id):
    state = user_states[user_id]
    sorted_cuisines = sorted(state['cuisines'].items(), key=lambda x: x[1], reverse=True)
    
    result_text = "üç¥ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–µ–≥–æ –æ–ø—Ä–æ—Å–∞:\n\n"
    for cuisine, score in sorted_cuisines:
        if score > 0:
            result_text += f"‚ñ´Ô∏è {cuisine}: {score} –±–∞–ª–ª–æ–≤\n"
    
    result_text += "\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üè†", callback_data='create_room'))
    
    bot.send_message(user_id, result_text, reply_markup=markup)

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É

üîç –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –æ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
- –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
- –ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
- –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""
    bot.send_message(message.chat.id, help_text)

'''