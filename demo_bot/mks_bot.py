import telebot
from telebot import types
import config
from qstns import questions, cuisines
from firebase_bd import init_firebase, get_user, save_user, update_user, create_room

bot = telebot.TeleBot(config.token)
# init_firebase()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–ú–æ–∂–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å', callback_data='start_quiz')
    markup.add(btn1)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚Äî Dorcia, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. –ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –≤–∞–º –∏ –≤–∞—à–∏–º –∫–æ–ª–ª–µ–≥–∞–º –ø–æ –≤–∫—É—Å—É. üçΩ\n"
        "–ß—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ –≤–∞—à–∏—Ö –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö. \n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith(('start_quiz', 'answer', 'followup')))
def handle_query(call):
    user_id = call.message.chat.id
    data = call.data
    
    if data == 'start_quiz':
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = {
            'current_question': 0,
            'cuisines': {k: 0 for k in cuisines},
            'follow_up': None
        }
        ask_question(user_id)
    elif data.startswith('answer_'):
        handle_answer(user_id, data)
    elif data.startswith('followup_'):
        handle_followup(user_id, data)

def ask_question(user_id, question_num=0):
    state = user_states[user_id]
    
    if question_num >= len(questions):
        return show_results(user_id)
    
    if state['follow_up'] is not None:
        q_data = state['follow_up']
        state['follow_up'] = None
    else:
        q_data = questions[question_num]
    
    markup = types.InlineKeyboardMarkup()
    for key in q_data['options']:
        btn_text = list(q_data['options'][key].keys())[0]
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f'answer_{question_num}_{key}'))
    
    bot.send_message(user_id, q_data['question'], reply_markup=markup)

def handle_answer(user_id, data):
    state = user_states[user_id]
    _, q_num, answer = data.split('_')
    q_num = int(q_num)
    q_data = questions[q_num]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã
    selected = list(q_data['options'][answer].values())[0]
    for cuisine in selected:
        state['cuisines'][cuisine] += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    if 'follow_up' in q_data and answer in q_data['follow_up']:
        state['follow_up'] = q_data['follow_up'][answer]
        ask_question(user_id, q_num)
    else:
        state['current_question'] += 1
        ask_question(user_id, state['current_question'])

def handle_followup(user_id, data):
    state = user_states[user_id]
    _, answer = data.split('_')
    q_data = state['follow_up']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã
    selected = list(q_data['options'][answer].values())[0]
    for cuisine in selected:
        state['cuisines'][cuisine] += 0.5
    
    state['current_question'] += 1
    ask_question(user_id, state['current_question'])

def show_results(user_id):
    state = user_states[user_id]
    sorted_cuisines = sorted(state['cuisines'].items(), key=lambda x: x[1], reverse=True)
    
    result_text = "üç¥ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–µ–≥–æ –æ–ø—Ä–æ—Å–∞:\n\n"
    for cuisine, score in sorted_cuisines:
        if score > 0:
            result_text += f"‚ñ´Ô∏è {cuisine}: {score} –±–∞–ª–ª–æ–≤\n"
    
    result_text += "\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üè†", callback_data='create_room'))
    
    bot.send_message(user_id, result_text, reply_markup=markup)

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É

üîç –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –æ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
- –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
- –ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
- –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""
    bot.send_message(message.chat.id, help_text)

bot.polling()