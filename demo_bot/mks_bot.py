import telebot
from telebot import types
from firebase_bd import *
import firebase_admin
from firebase_admin import firestore
import config
from qstns import questions, cuisines, MOCK_RESTAURANTS
import datetime
import random
import string
from collections import defaultdict

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
init_firebase()
bot = telebot.TeleBot(config.token)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ, –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–º –≤ Firebase)
user_states = {}

def get_room_keyboard():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–Ω–∞—Ç"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    rooms_ref = db.reference('/rooms')
    all_rooms = rooms_ref.get() or {}
    
    for room_id in all_rooms.keys():
        markup.add(types.KeyboardButton(f"–ö–æ–º–Ω–∞—Ç–∞ {room_id}"))
    return markup if all_rooms else None

@bot.message_handler(commands=['start'])
def welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(message.chat.id)
    user_data = get_user(user_id)
    
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='–ú–æ–∂–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å', callback_data='start_quiz')
    markup.add(btn)
    
    if user_data:
        show_main_menu(user_id, user_data)
    else:
        bot.send_message(
            user_id,
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚Äî Dorcia, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. üçΩ\n"
            "–ß—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ –≤–∞—à–∏—Ö –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö.\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=markup
        )

def show_main_menu(user_id, user_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üè†')
    btn2 = types.KeyboardButton('–ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã üîç')
    btn3 = types.KeyboardButton('–ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ÔøΩ')
    btn4 = types.KeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ üëãüèª')
    markup.add(btn1, btn2, btn3, btn4)
    
    text = ''' –ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ —Å–Ω–æ–≤–∞ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –≤–∞–º–∏! –Ø ‚Äî *Dorcia*, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. üçΩ


    '''
        
    bot.send_message(user_id, text, reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == '–ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è üçΩ')
def show_preferences(message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(message.chat.id)
    user_data = get_user(user_id)
    
    if user_data:
        sorted_cuisines = sorted(user_data['cuisines'].items(), 
                               key=lambda x: x[1], 
                               reverse=True)
        
        result_text = "üç¥ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:\n\n"
        for cuisine, score in sorted_cuisines:
            if score > 0:
                result_text += f"‚ñ´Ô∏è {cuisine}: {score} –±–∞–ª–ª–æ–≤\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'),
            types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data='restart_quiz')
        )
        
        bot.send_message(user_id, result_text, reply_markup=markup)
    else:
        bot.send_message(user_id, "–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å!")

@bot.callback_query_handler(func=lambda call: call.data == 'start_quiz')
def start_quiz(call):
    """–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞"""
    user_id = str(call.message.chat.id)
    user_states[user_id] = {
        'current_question': 0,
        'cuisines': {k: 0 for k in cuisines},
        'follow_up': None,
        'current_message_id': None
    }
    ask_question(user_id, 0)

def ask_question(user_id, question_num):
    """–ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    state = user_states[user_id]
    
    if question_num >= len(questions):
        try:
            bot.delete_message(user_id, state['current_message_id'])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return show_results(user_id)
    
    q_data = questions[question_num]
    markup = types.InlineKeyboardMarkup()
    
    for key, value in q_data['options'].items():
        btn_text = list(value.keys())[0]
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f'answer_{question_num}_{key}'))
    
    if state['current_message_id']:
        try:
            msg = bot.edit_message_text(
                chat_id=user_id,
                message_id=state['current_message_id'],
                text=q_data['question'],
                reply_markup=markup
            )
        except:
            msg = bot.send_message(user_id, q_data['question'], reply_markup=markup)
            state['current_message_id'] = msg.message_id
    else:
        msg = bot.send_message(user_id, q_data['question'], reply_markup=markup)
        state['current_message_id'] = msg.message_id
    
    user_states[user_id] = state

@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def handle_answer(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
    user_id = str(call.message.chat.id)
    data = call.data.split('_')
    q_num = int(data[1])
    answer = data[2]
    state = user_states[user_id]
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
    selected = list(questions[q_num]['options'][answer].values())[0]
    for cuisine in selected:
        state['cuisines'][cuisine] += 1
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    state['current_question'] += 1
    ask_question(user_id, state['current_question'])

def show_results(user_id):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞"""
    state = user_states[user_id]
    user_data = {
        'cuisines': state['cuisines'],
        'timestamp': datetime.datetime.now().isoformat()
    }
    
    sorted_cuisines = sorted(user_data['cuisines'].items(), 
                           key=lambda x: x[1], 
                           reverse=True)
    
    result_text = "üç¥ –ù–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:\n\n"
    for cuisine, score in sorted_cuisines:
        if score > 0:
            result_text += f"‚ñ´Ô∏è {cuisine}: {score} –±–∞–ª–ª–æ–≤\n"
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='main_menu'),
        types.InlineKeyboardButton("–ó–∞–Ω–æ–≤–æ", callback_data='restart_quiz')
    )
    
    bot.send_message(user_id, result_text, reply_markup=markup)
    save_user(user_id, user_data)

@bot.callback_query_handler(func=lambda call: call.data in ['main_menu', 'restart_quiz'])
def handle_menu_actions(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–µ–Ω—é"""
    user_id = str(call.message.chat.id)
    if call.data == 'main_menu':
        user_data = get_user(user_id)
        show_main_menu(user_id, user_data)
    elif call.data == 'restart_quiz':
        user_states[user_id] = {
            'current_question': 0,
            'cuisines': {k: 0 for k in cuisines},
            'follow_up': None,
            'current_message_id': None
        }
        ask_question(user_id, 0)


@bot.message_handler(func=lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üè†')
def handle_create_room(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É'"""
    create_room_command(message)

@bot.message_handler(commands=['create_room'])
def create_room_command(message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã"""
    user_id = str(message.chat.id)
    room_data = {
        "moderator": user_id,
        "members": [user_id],
        "status": "waiting",
        "params": {},
        "votes": {},
        "restaurants": []
    }
    
    room_id = create_room(room_data)
    update_user(user_id, {"current_room": room_id})
    
    bot.send_message(user_id, f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ {room_id} —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: *{room_id}*", 
                    parse_mode="Markdown")
    ask_additional_params(user_id, room_id)

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ üëãüèª')
def join_room_command(message):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ 4-–∑–Ω–∞—á–Ω–æ–º—É –∫–æ–¥—É"""
    user_id = str(message.chat.id)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:")
    bot.register_next_step_handler(message, process_room_code)

def process_room_code(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã"""
    user_id = str(message.chat.id)
    room_code = message.text.strip()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–¥–∞
        if not room_code.isdigit() or len(room_code) != 4:
            bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞! –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4 —Ü–∏—Ñ—Ä.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
        room = get_room(room_code)
        if not room:
            bot.send_message(user_id, "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
        if user_id in room.get('members', []):
            bot.send_message(user_id, "‚ÑπÔ∏è –í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        add_user_to_room(room_code, user_id)
        update_user(user_id, {"current_room": room_code})
        
        bot.send_message(user_id, f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ —Å –∫–æ–¥–æ–º {room_code}!")
    except Exception as e:
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞: {e}")


def ask_additional_params(user_id: str, room_id: str):
    """–ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–î–æ 500 ‚ÇΩ', '500-1000 ‚ÇΩ', '–°–≤—ã—à–µ 1000 ‚ÇΩ')
    msg = bot.send_message(user_id, "üí∏ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, lambda m: process_price_step(m, room_id))

def process_price_step(message, room_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    user_id = str(message.chat.id)
    price = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞
    if price not in ['–î–æ 500 ‚ÇΩ', '500-1000 ‚ÇΩ', '–°–≤—ã—à–µ 1000 ‚ÇΩ']:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return ask_additional_params(user_id, room_id)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    
    try:
        update_room(room_id, {f'params/{user_id}/price': price})
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('<30 –º–∏–Ω', '30-60 –º–∏–Ω', '>1 —á–∞—Å–∞')
        msg = bot.send_message(user_id, "‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ–±–µ–¥:", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: process_time_step(m, room_id))
    except Exception as e:
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞: {e}")

def process_time_step(message, room_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    user_id = str(message.chat.id)
    time = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞
    if time not in ['<30 –º–∏–Ω', '30-60 –º–∏–Ω', '>1 —á–∞—Å–∞']:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return ask_additional_params(user_id, room_id)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–µ–¥
        update_room(room_id, {f'params/{user_id}/time': time})
        bot.send_message(user_id, "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤—ã!"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ì–æ—Ç–æ–≤—ã!", callback_data=f"start_voting_{room_id}"))
        bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ *–ì–æ—Ç–æ–≤—ã!*, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.", reply_markup=markup, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda message: message.text.startswith("–ö–æ–º–Ω–∞—Ç–∞"))
def enter_room(message):
    """–í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É"""
    user_id = str(message.chat.id)
    room_id = message.text.split()[-1]
    room = get_room(room_id)
    
    if not room:
        bot.send_message(user_id, "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    if user_id not in room.get('members', []):
        add_user_to_room(room_id, user_id)
        update_user(user_id, {"current_room": room_id})
        bot.send_message(user_id, f"‚úÖ –í—ã –≤ –∫–æ–º–Ω–∞—Ç–µ {room_id}!")
    else:
        bot.send_message(user_id, "‚ÑπÔ∏è –í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ!")

@bot.callback_query_handler(func=lambda call: call.data.startswith('start_voting_'))
def start_voting(call):
    room_id = call.data.split('_')[-1]
    user_id = str(call.from_user.id)
    room = get_room(room_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if user_id not in room.get('members', []):
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ!")
        return
    
    # –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    update_room(room_id, {'status': 'voting'})
    for uid in room.get('members', []):
        try:
            send_voting_interface(uid, room_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {uid}: {e}")

def send_voting_interface(user_id: str, room_id: str, offset=0):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    room = get_room(room_id)
    if not room:
        return
    
    markup = types.InlineKeyboardMarkup()
    restaurants = room.get('restaurants', [])
    votes = room.get('votes', {})
    
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-5 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ (—Å —É—á–µ—Ç–æ–º offset)
    for rest in restaurants[offset:offset+5]:
        vote_count = votes.get(rest, 0)
        markup.add(types.InlineKeyboardButton(
            f"{rest} ({vote_count})", 
            callback_data=f"vote_{room_id}_{rest}"
        ))
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ ‚ûï"
    if len(restaurants) > offset + 5:
        markup.add(types.InlineKeyboardButton(
            "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ ‚ûï", 
            callback_data=f"more_rest_{room_id}_{offset+5}"
        ))
    
    try:
        bot.send_message(user_id, "üèÜ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã:", reply_markup=markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('vote_'))
@bot.callback_query_handler(func=lambda call: call.data.startswith('vote_'))
def handle_vote(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    _, room_id, rest = call.data.split('_', 2)
    user_id = str(call.from_user.id)
    room = get_room(room_id)
    
    if not room or user_id in room.get('voted', []):
        bot.answer_callback_query(call.id, "‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å–∞ –≤ Firebase
    new_votes = room.get('votes', {})
    new_votes[rest] = new_votes.get(rest, 0) + 1
    update_room(room_id, {
        'votes': new_votes,
        'voted': firestore.ArrayUnion([user_id])
    })
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for uid in room.get('members', []):
        send_voting_interface(uid, room_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('more_rest_'))
def add_more_restaurants(call):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ —Å–ø–∏—Å–æ–∫"""
    data = call.data.split('_')
    room_id = data[2]
    offset = int(data[3])  # –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    send_voting_interface(call.from_user.id, room_id, offset)

@bot.message_handler(commands=['info'])
def info_command(message):
    '''–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞'''
    info_text = '''
üîç –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:

- –û–ø—Ä–æ—Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
- –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
- –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?

1. –î–ª—è –æ–¥–Ω–æ–≥–æ:  
   –ï—Å–ª–∏ –≤—ã –∏—â–µ—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–µ–±—è, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é ¬´–ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã¬ª. –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º. 
   –í—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –æ—Ü–µ–Ω–∫—É, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫, –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –∏ –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è.

2. –î–ª—è –∫–æ–º–ø–∞–Ω–∏–∏:  
   –ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ—Ö–æ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –∫–æ–ª–ª–µ–≥–∞–º–∏, –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
   
   - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É:  
     –≠—Ç–∞ –æ–ø—Ü–∏—è –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. 
     –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≥–æ—Å—Ç–µ–π –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∏.
     
   - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ:  
     –ï—Å–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ –µ—ë –∫–æ–¥, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –≤—Å—Ç—Ä–µ—á–∏.

–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:

–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –≤–∫—É—Å–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞. 
–î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç ¬´–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ¬ª.

'''
    bot.send_message(message.chat.id, info_text)


from telebot import types
import config

@bot.message_handler(commands=['feedback'])
def feedback_command(message):
    '''–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'''
    feedback_text = '''
–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! 
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã—Ä–∞–∑–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∏–∂–µ. 
–ú—ã —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–µ –º–Ω–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ª—É—á—à–µ –¥–ª—è –≤–∞—Å! üòä
'''
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É ‚ùå"))
    
    msg = bot.reply_to(
        message, 
        feedback_text, 
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, process_feedback)

def process_feedback(message):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞'''
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É ‚ùå":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    if not message.text:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    try:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        bot.send_message(
            config.DEVELOPER_CHAT_ID,
            f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username} ({user_name}):\n\n{message.text}"
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.", reply_markup=types.ReplyKeyboardRemove())
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=types.ReplyKeyboardRemove())    

@bot.message_handler(commands=['id'])
def get_chat_id(message):
    chat_id = message.chat.id
    bot.reply_to(message, f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`", parse_mode="Markdown")

@bot.message_handler(commands=['help'])
def help_command(message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –°–ø—Ä–∞–≤–∫–∞
/create_room - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
/join_room - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
/info - –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞
/feedback - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å / –ü–æ–∂–µ–ª–∞–Ω–∏—è / –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–µ –∞–≤—Ç–æ—Ä–æ–≤
"""
    bot.send_message(message.chat.id, help_text)

if __name__ == '__main__':
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)