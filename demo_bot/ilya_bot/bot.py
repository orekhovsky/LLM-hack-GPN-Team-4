import telebot
from telebot import types
from firebase_bd import init_firebase, get_user, save_user, create_room, get_room, join_room, start_voting, vote_for_restaurant, get_votes, close_voting

import config
from qstns import questions, cuisines
import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
init_firebase()
bot = telebot.TeleBot(config.token)

# –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å API-–ø–æ–¥–±–æ—Ä–æ–º)
RESTAURANTS = ["La Piazza", "Sakura Sushi", "Texas BBQ"]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–º–Ω–∞—Ç
user_rooms = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞
user_states = {}

@bot.message_handler(commands=['start'])
def welcome(message):
    user_id = str(message.chat.id)
    user_data = get_user(user_id)
    
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='–ú–æ–∂–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å', callback_data='start_quiz')
    markup.add(btn)
    
    if user_data and 'cuisines' in user_data and user_data['cuisines']:
        show_main_menu(user_id, user_data)
    else:
        bot.send_message(
            user_id,
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚Äî Dorcia, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. üçΩ\n"
            "–ß—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ –≤–∞—à–∏—Ö –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö.\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=markup
        )

def show_main_menu(user_id, user_data):
    # –ò–∑–º–µ–Ω–µ–Ω–æ: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ callback_data
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üè†")
    btn2 = types.KeyboardButton('–ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã üîç')
    btn3 = types.KeyboardButton('–ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è üçΩ')
    btn4 = types.KeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ üëãüèª')
    markup.add(btn1, btn2, btn3, btn4)
    
    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    bot.send_message(user_id, text, reply_markup=markup)

# –î–æ–±–∞–≤–ª–µ–Ω–æ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"
@bot.message_handler(func=lambda message: message.text == '–ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è üçΩ')
def show_preferences(message):
    user_id = str(message.chat.id)
    user_data = get_user(user_id)
    
    if user_data:
        sorted_cuisines = sorted(user_data['cuisines'].items(), 
                               key=lambda x: x[1], 
                               reverse=True)
        
        result_text = "üç¥ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:\n\n"
        for cuisine, score in sorted_cuisines:
            if score > 0:
                result_text += f"‚ñ´Ô∏è {cuisine}: {score} –±–∞–ª–ª–æ–≤\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data='main_menu'),
                 types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", callback_data='restart_quiz'))
        
        bot.send_message(user_id, result_text, reply_markup=markup)
    else:
        bot.send_message(user_id, "–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å!")

@bot.callback_query_handler(func=lambda call: call.data == 'start_quiz')
def start_quiz(call):
    user_id = str(call.message.chat.id)
    # –ò–∑–º–µ–Ω–µ–Ω–æ: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏
    user_states[user_id] = {
        'current_question': 0,
        'cuisines': {k: 0 for k in cuisines},
        'follow_up': None
    }
    ask_question(user_id, 0)

def ask_question(user_id, question_num):
    state = user_states[user_id]
    
    if question_num >= len(questions):
        return show_results(user_id)
    
    if state['follow_up']:
        q_data = state['follow_up']
        state['follow_up'] = None
    else:
        q_data = questions[question_num]
    
    markup = types.InlineKeyboardMarkup()
    for key, value in q_data['options'].items():
        btn_text = list(value.keys())[0]
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f'answer_{question_num}_{key}'))
    
    bot.send_message(user_id, q_data['question'], reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def handle_answer(call):
    user_id = str(call.message.chat.id)
    data = call.data.split('_')
    q_num = int(data[1])
    answer = data[2]
    state = user_states[user_id]
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
    selected = list(questions[q_num]['options'][answer].values())[0]
    for cuisine in selected:
        state['cuisines'][cuisine] += 1
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    if 'follow_up' in questions[q_num] and answer in questions[q_num]['follow_up']:
        state['follow_up'] = questions[q_num]['follow_up'][answer]
        ask_question(user_id, q_num)
    else:
        state['current_question'] += 1
        ask_question(user_id, state['current_question'])

def show_results(user_id):
    state = user_states[user_id]
    # –ò–∑–º–µ–Ω–µ–Ω–æ: –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö
    user_data = {
        'cuisines': state['cuisines'],
        'timestamp': datetime.datetime.now().isoformat()
    }
    
    sorted_cuisines = sorted(user_data['cuisines'].items(), 
                           key=lambda x: x[1], 
                           reverse=True)
    
    result_text = "üç¥ –ù–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:\n\n"
    for cuisine, score in sorted_cuisines:
        if score > 0:
            result_text += f"‚ñ´Ô∏è {cuisine}: {score} –±–∞–ª–ª–æ–≤\n"
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'),
        types.InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data='restart_quiz')
    )
    
    bot.send_message(user_id, result_text, reply_markup=markup)
    save_user(user_id, user_data) 

@bot.callback_query_handler(func=lambda call: call.data in ['main_menu', 'restart_quiz'])
def handle_menu_actions(call):
    user_id = str(call.message.chat.id)
    if call.data == 'main_menu':
        user_data = get_user(user_id)
        show_main_menu(user_id, user_data)
    elif call.data == 'restart_quiz':
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞
        user_states[user_id] = {
            'current_question': 0,
            'cuisines': {k: 0 for k in cuisines},
            'follow_up': None
        }
        ask_question(user_id, 0)
@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üè†")
def create_room_handler(message):
    user_id = str(message.chat.id)
    room_code = create_room(user_id)
    user_rooms[user_id] = room_code

    markup = types.InlineKeyboardMarkup()
    btn_start = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data=f"start_voting_{room_code}")
    markup.add(btn_start)

    bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: *{room_code}*.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å.", parse_mode="Markdown", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ üëãüèª")
def join_room_handler(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:")
    bot.register_next_step_handler(msg, process_join_room)

def process_join_room(message):
    user_id = str(message.chat.id)
    room_code = message.text.strip()

    if join_room(user_id, room_code):
        user_rooms[user_id] = room_code
        bot.send_message(user_id, f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ *{room_code}*! –ñ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("start_voting_"))
def start_voting_handler(call):
    user_id = str(call.message.chat.id)
    room_code = call.data.split("_")[2]

    if user_id in user_rooms and user_rooms[user_id] == room_code:
        start_voting(room_code)

        markup = types.InlineKeyboardMarkup()
        for restaurant in RESTAURANTS:
            markup.add(types.InlineKeyboardButton(restaurant, callback_data=f"vote_{room_code}_{restaurant}"))

        bot.send_message(call.message.chat.id, "üçΩ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("vote_"))
def vote_handler(call):
    user_id = str(call.message.chat.id)
    _, room_code, restaurant = call.data.split("_")

    vote_for_restaurant(room_code, user_id, restaurant)
    bot.send_message(user_id, f"‚úÖ –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ *{restaurant}*.", parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
def end_voting_handler(message):
    user_id = str(message.chat.id)
    room_code = user_rooms.get(user_id)

    if not room_code:
        bot.send_message(user_id, "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–º–Ω–∞—Ç—ã.")
        return

    votes = get_votes(room_code)
    close_voting(room_code)

    results = {}
    for choice in votes.values():
        results[choice] = results.get(choice, 0) + 1

    sorted_results = sorted(results.items(), key=lambda x: x[1], reverse=True)
    result_text = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:*\n\n"
    for place, (restaurant, count) in enumerate(sorted_results, 1):
        result_text += f"{place}. {restaurant} - {count} –≥–æ–ª–æ—Å(–æ–≤)\n"

    winner = sorted_results[0][0] if sorted_results else "–ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤"
    result_text += f"\nüèÜ *–í—ã–±—Ä–∞–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω:* {winner}!"

    bot.send_message(user_id, result_text, parse_mode="Markdown")
@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É

üîç –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –æ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
- –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
- –ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
- –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""
    bot.send_message(message.chat.id, help_text)

if __name__ == '__main__':
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)