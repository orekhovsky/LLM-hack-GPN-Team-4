import telebot
import random
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from storage import get_rooms, save_rooms, get_users, save_users
import config

bot = telebot.TeleBot(config.token)

# üî• –¢—Ä–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
RESTAURANTS = ["üç£ Sushi Bar", "üçï Pizza Place", "ü•© Steak House"]

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"), KeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ"))
    return markup

# üìå –ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
def moderator_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"))
    return markup

# üìå –ú–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
def voting_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for rest in RESTAURANTS:
        markup.add(KeyboardButton(rest))
    return markup

# üìå –ú–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
def finish_voting_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"))
    return markup

# üìå –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–º–Ω–∞—Ç—ã
def close_room_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É"))
    return markup

# üî• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω!", reply_markup=main_menu())

# üî• –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
@bot.message_handler(func=lambda msg: msg.text == "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É")
def create_room_handler(message):
    rooms = get_rooms()
    users = get_users()
    
    room_code = str(random.randint(1000, 9999))
    rooms[room_code] = {"moderator": message.chat.id, "guests": [], "votes": {}}
    users[str(message.chat.id)] = {"room": room_code, "role": "moderator"}
    
    save_rooms(rooms)
    save_users(users)

    bot.send_message(message.chat.id, f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: {room_code}\n–û–∂–∏–¥–∞–µ–º –≥–æ—Å—Ç–µ–π...", reply_markup=moderator_menu())

# üî• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
@bot.message_handler(func=lambda msg: msg.text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ")
def join_room_handler(message):
    bot.send_message(message.chat.id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:")

    @bot.message_handler(func=lambda msg: msg.text.isdigit())
    def process_room_code(message):
        rooms = get_rooms()
        users = get_users()
        room_code = message.text

        if room_code not in rooms:
            bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–Ω–æ–≤–∞.")
            return

        rooms[room_code]["guests"].append(message.chat.id)
        users[str(message.chat.id)] = {"room": room_code, "role": "guest"}

        save_rooms(rooms)
        save_users(users)

        bot.send_message(message.chat.id, "‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")

# üî• –ù–∞—á–∞–ª–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)
@bot.message_handler(func=lambda msg: msg.text == "–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
def start_voting_handler(message):
    users = get_users()
    user = users.get(str(message.chat.id))

    if user and user["role"] == "moderator":
        room_code = user["room"]
        bot.send_message(message.chat.id, "üéâ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!", reply_markup=finish_voting_menu())

        rooms = get_rooms()
        participants = rooms[room_code]["guests"] + [rooms[room_code]["moderator"]]
        
        for participant in participants:
            bot.send_message(participant, "üçΩ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=voting_menu())

# üî• –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
@bot.message_handler(func=lambda msg: msg.text in RESTAURANTS)
def vote_handler(message):
    users = get_users()
    user = users.get(str(message.chat.id))

    if user:
        room_code = user["room"]
        rooms = get_rooms()

        if room_code in rooms:
            rooms[room_code]["votes"][message.chat.id] = message.text
            save_rooms(rooms)

            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–µ–≥–æ
            bot.send_message(message.chat.id, "‚úÖ –í–∞—à –≥–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!", reply_markup=ReplyKeyboardRemove())

            # –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            if user["role"] == "moderator":
                bot.send_message(message.chat.id, "üìù –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.", reply_markup=finish_voting_menu())

# üî• –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)
@bot.message_handler(func=lambda msg: msg.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
def finish_voting_handler(message):
    users = get_users()
    user = users.get(str(message.chat.id))

    if user and user["role"] == "moderator":
        room_code = user["room"]
        rooms = get_rooms()

        results = {rest: 0 for rest in RESTAURANTS}
        for vote in rooms[room_code]["votes"].values():
            results[vote] += 1

        results_text = "\n".join([f"{r}: {c} –≥–æ–ª–æ—Å–æ–≤" for r, c in results.items()])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        participants = rooms[room_code]["guests"] + [rooms[room_code]["moderator"]]
        for participant in participants:
            bot.send_message(participant, f"üìä –ò—Ç–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n{results_text}")

        bot.send_message(message.chat.id, "üîö –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É.", reply_markup=close_room_menu())

# üî• –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–º–Ω–∞—Ç—ã
@bot.message_handler(func=lambda msg: msg.text == "–ó–∞–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É")
def close_room_handler(message):
    users = get_users()
    user = users.get(str(message.chat.id))

    if user and user["role"] == "moderator":
        room_code = user["room"]
        rooms = get_rooms()

        # –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
        del rooms[room_code]
        save_rooms(rooms)

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
        users = {uid: info for uid, info in users.items() if info["room"] != room_code}
        save_users(users)

        bot.send_message(message.chat.id, "üö™ –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞!", reply_markup=main_menu())

# üî• –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
