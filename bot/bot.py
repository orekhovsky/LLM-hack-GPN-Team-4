import telebot
from telebot import types
from firebase_bd import *
import firebase_admin
from firebase_admin import firestore
import pandas as pd
from firebase_admin import db
import config
from qstns import questions, cuisines, MOCK_RESTAURANTS
import datetime
import random
import string
from collections import defaultdict

init_firebase()
bot = telebot.TeleBot(config.token)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ, –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–º –≤ Firebase)
user_states = {}

# ------------------------ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ------------------------

@bot.message_handler(commands=['start'])
def welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(message.chat.id)
    user_data = get_user(user_id)
    
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='–ú–æ–∂–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å', callback_data='start_quiz')
    markup.add(btn)
    
    if user_data:
        show_main_menu(user_id, user_data)
    else:
        bot.send_message(
            user_id,
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚Äî Dorcia, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. üçΩ\n"
            "–ß—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ –≤–∞—à–∏—Ö –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö.\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=markup
        )

def show_main_menu(user_id, user_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üè†')
    btn2 = types.KeyboardButton('–ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã üîç')
    btn3 = types.KeyboardButton('–ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è üçΩ')
    btn4 = types.KeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ üëãüèª')
    markup.add(btn1, btn2, btn3, btn4)
    
    text = ''' –ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ —Å–Ω–æ–≤–∞ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –≤–∞–º–∏! –Ø ‚Äî *Dorcia*, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. üçΩ

                                    *–í–∞—à –≤–∫—É—Å- –Ω–∞—à –≤—ã–±–æ—Ä*
    '''
        
    bot.send_message(user_id, text, reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == '–ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è üçΩ')
def show_preferences(message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(message.chat.id)
    user_data = get_user(user_id)
    
    if user_data:
        sorted_cuisines = sorted(user_data['cuisines'].items(), 
                               key=lambda x: x[1], 
                               reverse=True)
        
        result_text = "üç¥ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:\n\n"
        for cuisine, score in sorted_cuisines:
            if score > 0:
                result_text += f"‚ñ´Ô∏è {cuisine}: {score} –±–∞–ª–ª–æ–≤\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'),
            types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data='restart_quiz')
        )
        
        bot.send_message(user_id, result_text, reply_markup=markup)
    else:
        bot.send_message(user_id, "–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å!")

# ------------------------ –û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ------------------------

@bot.callback_query_handler(func=lambda call: call.data == 'start_quiz')
def start_quiz(call):
    """–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞"""
    user_id = str(call.message.chat.id)
    user_states[user_id] = {
        'current_question': 0,
        'cuisines': {k: 0 for k in cuisines},
        'follow_up': None,
        'current_message_id': None
    }
    ask_question(user_id, 0)

def ask_question(user_id, question_num):
    """–ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    state = user_states[user_id]
    
    if question_num >= len(questions):
        try:
            bot.delete_message(user_id, state['current_message_id'])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return show_results(user_id)
    
    q_data = questions[question_num]
    markup = types.InlineKeyboardMarkup()
    
    for key, value in q_data['options'].items():
        btn_text = list(value.keys())[0]
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f'answer_{question_num}_{key}'))
    
    if state['current_message_id']:
        try:
            msg = bot.edit_message_text(
                chat_id=user_id,
                message_id=state['current_message_id'],
                text=q_data['question'],
                reply_markup=markup
            )
        except:
            msg = bot.send_message(user_id, q_data['question'], reply_markup=markup)
            state['current_message_id'] = msg.message_id
    else:
        msg = bot.send_message(user_id, q_data['question'], reply_markup=markup)
        state['current_message_id'] = msg.message_id
    
    user_states[user_id] = state

@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def handle_answer(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
    user_id = str(call.message.chat.id)
    data = call.data.split('_')
    q_num = int(data[1])
    answer = data[2]
    state = user_states[user_id]
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
    selected = list(questions[q_num]['options'][answer].values())[0]
    for cuisine in selected:
        state['cuisines'][cuisine] += 1
    
    state['current_question'] += 1
    ask_question(user_id, state['current_question'])

def show_results(user_id):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞"""
    state = user_states[user_id]
    user_data = {
        'cuisines': state['cuisines'],
        'timestamp': datetime.datetime.now().isoformat()
    }
    
    sorted_cuisines = sorted(user_data['cuisines'].items(), 
                           key=lambda x: x[1], 
                           reverse=True)
    
    result_text = "üç¥ –ù–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:\n\n"
    for cuisine, score in sorted_cuisines:
        if score > 0:
            result_text += f"‚ñ´Ô∏è {cuisine}: {score} –±–∞–ª–ª–æ–≤\n"
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='main_menu'),
        types.InlineKeyboardButton("–ó–∞–Ω–æ–≤–æ", callback_data='restart_quiz')
    )
    
    bot.send_message(user_id, result_text, reply_markup=markup)
    save_user(user_id, user_data)

@bot.callback_query_handler(func=lambda call: call.data in ['main_menu', 'restart_quiz'])
def handle_menu_actions(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–µ–Ω—é"""
    user_id = str(call.message.chat.id)
    if call.data == 'main_menu':
        user_data = get_user(user_id)
        show_main_menu(user_id, user_data)
    elif call.data == 'restart_quiz':
        user_states[user_id] = {
            'current_question': 0,
            'cuisines': {k: 0 for k in cuisines},
            'follow_up': None,
            'current_message_id': None
        }
        ask_question(user_id, 0)


# ======================= –û–î–ò–ù–û–ß–ù–´–ô –ü–û–ò–°–ö ==========================

@bot.message_handler(func=lambda message: message.text == '–ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã üîç')
def handle_solo_search(message):
    """–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∑–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    user_id = str(message.chat.id)
    user_states[user_id] = {'mode': 'solo', 'step': 'price'}
    ask_price_step(user_id)

def ask_price_step(user_id):
    """–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–î–æ 500 ‚ÇΩ', '500-1000 ‚ÇΩ', '–°–≤—ã—à–µ 1000 ‚ÇΩ')
    bot.send_message(user_id, "üí∏ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(str(message.chat.id), {}).get('step') == 'price')
def process_solo_price(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    user_id = str(message.chat.id)
    price_map = {
        '–î–æ 500 ‚ÇΩ': (0, 500),
        '500-1000 ‚ÇΩ': (501, 1000),
        '–°–≤—ã—à–µ 1000 ‚ÇΩ': (1001, 5000)
    }
    
    if message.text not in price_map:
        bot.send_message(user_id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫!")
        return ask_price_step(user_id)
    
    user_states[user_id]['price'] = price_map[message.text]
    user_states[user_id]['step'] = 'time'
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('<30 –º–∏–Ω', '30-60 –º–∏–Ω', '>1 —á–∞—Å–∞')
    bot.send_message(user_id, "‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ–±–µ–¥:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(str(message.chat.id), {}).get('step') == 'time')
def process_solo_time(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    user_id = str(message.chat.id)
    if message.text not in ['<30 –º–∏–Ω', '30-60 –º–∏–Ω', '>1 —á–∞—Å–∞']:
        bot.send_message(user_id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫!")
        return
    
    user_states[user_id]['time'] = message.text
    user_states[user_id]['step'] = 'cuisine'
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è', '–Ø–ø–æ–Ω—Å–∫–∞—è', '–ö–∞—Ñ–µ', '–†–µ—Å—Ç–æ—Ä–∞–Ω', '–ü–∏—Ü—Ü–µ—Ä–∏—è', '–î—Ä—É–≥–æ–µ')
    bot.send_message(user_id, "üçΩ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∫—É—Ö–Ω–µ/—Ç–∏–ø—É:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(str(message.chat.id), {}).get('step') == 'cuisine')
def process_solo_cuisine(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ö–Ω–∏ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    user_id = str(message.chat.id)
    cuisine = message.text
    filters = user_states[user_id]
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    filtered = [
        r for r in MOCK_RESTAURANTS 
        if filters['price'][0] <= r['avg_price'] <= filters['price'][1]
    ]
    
    if cuisine != '–î—Ä—É–≥–æ–µ':
        filtered = [r for r in filtered if cuisine.lower() in r['name'].lower()]
    
    if not filtered:
        bot.send_message(user_id, "üòû –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    response = "üç¥ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã:\n\n"
    for i, rest in enumerate(filtered[:5], 1):
        response += (
            f"{i}. {rest['name']}\n"
            f"   –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {rest['avg_price']} ‚ÇΩ\n"
            f"   –†–µ–π—Ç–∏–Ω–≥: {rest['rating']} ‚òÖ\n\n"
        )
    
    bot.send_message(user_id, response)


# ------------------------ –õ–û–ì–ò–ö–ê –ö–û–ú–ù–ê–¢ ---------------------------

# ------------------------ –õ–û–ì–ò–ö–ê –ö–û–ú–ù–ê–¢ ---------------------------
@bot.message_handler(func=lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üè†')
def handle_create_room(message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã"""
    user_id = str(message.chat.id)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
    room_code = str(random.randint(1000, 9999))
    while get_room(room_code):
        room_code = str(random.randint(1000, 9999))
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ Firebase
    room_data = {
        'moderator': user_id,
        'members': {user_id: True},
        'status': 'waiting',
        'votes': {},
        'restaurants': [r['name'] for r in MOCK_RESTAURANTS],
        'created_at': datetime.datetime.now().isoformat()
    }
    
    create_room(room_data, room_code)
    update_user(user_id, {'current_room': room_code})
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data='start_voting'))
    
    bot.send_message(
        user_id, 
        f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ *{room_code}* —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ üëãüèª')
def join_room_command(message):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    user_id = str(message.chat.id)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:")
    bot.register_next_step_handler(message, process_room_code)

def process_room_code(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã"""
    user_id = str(message.chat.id)
    room_id = message.text.strip()

    if not room_id.isdigit() or len(room_id) != 4:
        return bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞!")

    try:
        room = get_room(room_id)
        if not room:
            return bot.send_message(user_id, "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        
        if user_id in room.get('members', {}):
            return bot.send_message(user_id, "‚ÑπÔ∏è –í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ!")
        
        if room.get('status') != 'waiting':
            return bot.send_message(user_id, "‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å!")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        add_user_to_room(room_id, user_id)
        update_user(user_id, {'current_room': room_id})
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        moderator_id = room['moderator']
        bot.send_message(
            moderator_id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ!"
        )
        
        bot.send_message(user_id, f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == 'start_voting')
def start_voting_handler(call):
    """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    user_id = str(call.message.chat.id)
    user_data = get_user(user_id)
    room_id = user_data.get('current_room')
    
    if not room_id:
        return bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!")
    
    room = get_room(room_id)
    if not room or room.get('moderator') != user_id:
        return bot.send_message(user_id, "‚ùå –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!")
    
    # –Ø–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥–æ–ª–æ—Å–æ–≤
    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    ref = db.reference(f'/rooms/{room_id}')
    ref.update({
        'status': 'voting',
        'votes': {},
        'results': None,
        'winner': None
    })
        
    # –†–∞—Å—Å—ã–ª–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    members = room.get('members', {}).keys()
    for member_id in members:
        try:
            send_voting_interface(member_id, room_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {member_id}: {e}")

def send_voting_interface(user_id: str, room_id: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    room = get_room(room_id)
    if not room:
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for rest in room.get('restaurants', []):
        markup.add(types.KeyboardButton(rest))
    
    # –†–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if room['moderator'] == user_id:
        markup.add(types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ‚úÖ"))
    else:
        markup.add(types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä üîÑ"))
    
    bot.send_message(
        user_id, 
        "üó≥ *–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=markup,
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda message: message.text in MOCK_RESTAURANTS)
def vote_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏"""
    user_id = str(message.chat.id)
    user_data = get_user(user_id)
    room_id = user_data.get('current_room')
    
    if not room_id:
        return bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        room_ref = db.reference(f'/rooms/{room_id}')
        room = room_ref.get()
        
        if not room or room.get('status') != 'voting':
            return bot.send_message(user_id, "‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ!")

        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤
        def transaction_update(data):
            if not data:
                return None
            
            votes = data.get('votes', {})
            votes[user_id] = message.text
            data['votes'] = votes
            return data

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        room_ref.transaction(transaction_update)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä üîÑ"))
        bot.send_message(user_id, "‚úÖ –í–∞—à –≤—ã–±–æ—Ä —É—á—Ç–µ–Ω!", reply_markup=markup)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä üîÑ")
def change_vote_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞"""
    user_id = str(message.chat.id)
    user_data = get_user(user_id)
    room_id = user_data.get('current_room')
    
    if not room_id:
        return bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!")
    
    room = get_room(room_id)
    if not room or room['status'] != 'voting':
        return bot.send_message(user_id, "‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for rest in room.get('restaurants', []):
        markup.add(types.KeyboardButton(rest))
    
    if room['moderator'] == user_id:
        markup.add(types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ‚úÖ"))
    
    bot.send_message(
        user_id, 
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ‚úÖ")

def finish_voting_handler(message):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    user_id = str(message.chat.id)
    user_data = get_user(user_id)
    room_id = user_data.get('current_room')
    
    try:
        room_ref = db.reference(f'/rooms/{room_id}')
        room = room_ref.get()
        
        if not room or room['moderator'] != user_id:
            return bot.send_message(user_id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!")

        votes = room.get('votes', {})
        
        # –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        votes_ref = db.reference(f'/rooms/{room_id}/votes')
        actual_votes = votes_ref.get() or {}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = defaultdict(int)
        for rest in actual_votes.values():
            results[rest] += 1
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if not results:
            winner = "‚ùå –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª"
        else:
            max_votes = max(results.values())
            candidates = [rest for rest, v in results.items() if v == max_votes]
            winner = random.choice(candidates) if len(candidates) > 1 else candidates[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
        room_ref.update({
            'status': 'completed',
            'winner': winner,
            'results': dict(results)
        })
        
        # –†–∞—Å—Å—ã–ª–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for member_id in room.get('members', {}):
            try:
                bot.send_message(member_id, 
                    f"üèÜ *–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:* {winner}\n\n" 
                    f"*–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:*\n" + 
                    "\n".join([f"‚ñ´Ô∏è {k}: {v}" for k,v in results.items()]),
                    parse_mode="Markdown",
                    reply_markup=types.ReplyKeyboardRemove()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {member_id}: {e}")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

@bot.message_handler(func=lambda message: message.text == "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ üèÅ")
def final_finish_handler(message):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    user_id = str(message.chat.id)
    user_data = get_user(user_id)
    room_id = user_data.get('current_room')
    
    if not room_id:
        return bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!")
    
    room = get_room(room_id)
    if not room or room['moderator'] != user_id:
        return bot.send_message(user_id, "‚ùå –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!")
    
    # –†–∞—Å—Å—ã–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    members = room.get('members', {}).keys()
    for member_id in members:
        try:
            bot.send_message(
                member_id,
                "üèÅ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ö–æ–º–∏—Ç–µ—Ç –∑–∞–∫—Ä—ã—Ç.",
                reply_markup=types.ReplyKeyboardRemove()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {member_id}: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
    update_room(room_id, {'status': 'finalized'})

# ------------------------ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ------------------------


@bot.message_handler(commands=['info'])
def info_command(message):
    '''–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞'''
    info_text = '''
    üîç –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:

    - –û–ø—Ä–æ—Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    - –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    - –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

    –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?

    1. –î–ª—è –æ–¥–Ω–æ–≥–æ:  
    –ï—Å–ª–∏ –≤—ã –∏—â–µ—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–µ–±—è, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é ¬´–ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã¬ª.
    –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º. 
    –í—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –æ—Ü–µ–Ω–∫—É, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫, –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –∏ –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è.

    2. –î–ª—è –∫–æ–º–ø–∞–Ω–∏–∏:  
    –ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ—Ö–æ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –∫–æ–ª–ª–µ–≥–∞–º–∏, –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
    
    - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É:  
        –≠—Ç–∞ –æ–ø—Ü–∏—è –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. 
        –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≥–æ—Å—Ç–µ–π –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∏.
        
    - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ:  
        –ï—Å–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ –µ—ë –∫–æ–¥, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –≤—Å—Ç—Ä–µ—á–∏.

    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:

    –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –≤–∫—É—Å–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞. 
    –î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç ¬´–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ¬ª.

    '''
    bot.send_message(message.chat.id, info_text)


@bot.message_handler(commands=['feedback'])
def feedback_command(message):
    '''–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'''
    feedback_text = '''
    –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! 
    –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã—Ä–∞–∑–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∏–∂–µ. 
    –ú—ã —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–µ –º–Ω–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ª—É—á—à–µ –¥–ª—è –≤–∞—Å! üòä
    '''
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É ‚ùå"))
    
    msg = bot.reply_to(
        message, 
        feedback_text, 
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, process_feedback)

def process_feedback(message):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞'''
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É ‚ùå":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    if not message.text:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    try:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        bot.send_message(
            config.DEVELOPER_CHAT_ID,
            f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username} ({user_name}):\n\n{message.text}"
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.", reply_markup=types.ReplyKeyboardRemove())
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=types.ReplyKeyboardRemove())    

@bot.message_handler(commands=['id'])
def get_chat_id(message):
    chat_id = message.chat.id
    bot.reply_to(message, f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`", parse_mode="Markdown")

@bot.message_handler(commands=['help'])
def help_command(message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
    üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
    /help - –°–ø—Ä–∞–≤–∫–∞
    /info - –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞
    /feedback - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å / –ü–æ–∂–µ–ª–∞–Ω–∏—è / –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–µ –∞–≤—Ç–æ—Ä–æ–≤
    """
    bot.send_message(message.chat.id, help_text)

if __name__ == '__main__':
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)